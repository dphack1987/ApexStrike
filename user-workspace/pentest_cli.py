#!/usr/bin/env python3
import argparse
import sys
import os
import json
from datetime import datetime
import time
from colorama import init, Fore, Style
from threading import Thread, Event

# Import our modules
from modules.port_scanner import PortScanner
from modules.web_scanner import WebScanner
from modules.iot_scanner import IoTScanner
from modules.dos_tester import DoSTester
from modules.exploit_engine import ExploitEngine

# Initialize colorama for Windows CMD
init()

class ProgressBar:
    def __init__(self, description="Progreso", total=100):
        self.description = description
        self.total = total
        self.current = 0
        self.bar_length = 50
        self.stop_event = Event()
        self.spinner_chars = "⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏"
        self.spinner_index = 0

    def update(self, current):
        self.current = current

    def _get_progress_bar(self):
        filled_length = int(self.bar_length * self.current / self.total)
        bar = f"{Fore.GREEN}{'█' * filled_length}{Fore.WHITE}{'░' * (self.bar_length - filled_length)}{Style.RESET_ALL}"
        percent = f"{Fore.CYAN}{int(100 * self.current / self.total)}%{Style.RESET_ALL}"
        spinner = f"{Fore.YELLOW}{self.spinner_chars[self.spinner_index]}{Style.RESET_ALL}"
        return f"\r{spinner} {self.description}: {bar} {percent}"

    def _progress_worker(self):
        while not self.stop_event.is_set():
            self.spinner_index = (self.spinner_index + 1) % len(self.spinner_chars)
            print(self._get_progress_bar(), end='', flush=True)
            time.sleep(0.1)
        print()  # Nueva línea al terminar

    def start(self):
        self.thread = Thread(target=self._progress_worker)
        self.thread.start()

    def stop(self):
        self.stop_event.set()
        self.thread.join()

class ApexStrike:
    def __init__(self):
        self.target = None
        self.version = "1.0.0"
        self.progress = None
        
    def print_banner(self):
        banner = f"""
{Fore.RED}
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⠀⠀⠀⠀⢀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡖⠁⠀⠀⠀⠀⠀⠀⠈⢲⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⣼⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣧⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⣸⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣇⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⣿⣿⡇⠀⢀⣀⣤⣤⣤⣤⣀⡀⠀⢸⣿⣿⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⣔⢿⡿⠟⠛⠛⠻⢿⡿⣢⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⣀⣤⣶⣾⣿⣿⣿⣷⣤⣀⡀⢀⣀⣤⣾⣿⣿⣿⣷⣶⣤⡀⠀⠀⠀⠀
⠀⠀⢠⣾⣿⡿⠿⠿⠿⣿⣿⣿⣿⡿⠏⠻⢿⣿⣿⣿⣿⠿⠿⠿⢿⣿⣷⡀⠀⠀
⠀⢠⡿⠋⠁⠀⠀⢸⣿⡇⠉⠻⣿⠇⠀⠀⠸⣿⡿⠋⢰⣿⡇⠀⠀⠈⠙⢿⡄⠀
⠀⡿⠁⠀⠀⠀⠀⠘⣿⣷⡀⠀⠰⣿⣶⣶⣿⡎⠀⢀⣾⣿⠇⠀⠀⠀⠀⠈⢿⠀
⠀⡇⠀⠀⠀⠀⠀⠀⠹⣿⣷⣄⠀⣿⣿⣿⣿⠀⣠⣾⣿⠏⠀⠀⠀⠀⠀⠀⢸⠀
⠀⠁⠀⠀⠀⠀⠀⠀⠀⠈⠻⢿⢇⣿⣿⣿⣿⡸⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠈⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣼⣿⣿⣿⣿⣧⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠐⢤⣀⣀⢀⣀⣠⣴⣿⣿⠿⠋⠙⠿⣿⣿⣦⣄⣀⠀⠀⣀⡠⠂⠀⠀⠀
⠀⠀⠀⠀⠀⠈⠉⠛⠛⠛⠛⠉⠀⠀⠀⠀⠀⠈⠉⠛⠛⠛⠛⠋⠁⠀⠀⠀⠀⠀
{Style.RESET_ALL}
{Fore.CYAN}╔═══════════════════════════════════════════════════════════════════════════════╗{Style.RESET_ALL}
{Fore.YELLOW}║                        {Fore.RED}🔥 A P E X S T R I K E 🔥{Fore.YELLOW}                              ║
{Fore.CYAN}╠═══════════════════════════════════════════════════════════════════════════════╣{Style.RESET_ALL}
{Fore.GREEN}║  Advanced Network & IoT Security Testing Framework - Version: {self.version}              ║{Style.RESET_ALL}
{Fore.MAGENTA}║  [ Created by CyberHunters Team - The Art of Digital Warfare ]                         ║{Style.RESET_ALL}
{Fore.CYAN}╚═══════════════════════════════════════════════════════════════════════════════╝{Style.RESET_ALL}

{Fore.RED}[!] {Fore.YELLOW}ADVERTENCIA: {Fore.WHITE}Esta herramienta es solo para pruebas autorizadas{Style.RESET_ALL}
{Fore.BLUE}[*] {Fore.CYAN}Modo: {Fore.WHITE}Análisis Avanzado de Seguridad{Style.RESET_ALL}
{Fore.GREEN}[+] {Fore.CYAN}Estado: {Fore.WHITE}Listo para comenzar{Style.RESET_ALL}
"""
        print(banner)
        
    def print_status(self, message, status_type="info"):
        """Print formatted status messages"""
        status_colors = {
            "info": f"{Fore.BLUE}[*]{Style.RESET_ALL}",
            "success": f"{Fore.GREEN}[+]{Style.RESET_ALL}",
            "warning": f"{Fore.YELLOW}[!]{Style.RESET_ALL}",
            "error": f"{Fore.RED}[!]{Style.RESET_ALL}",
            "critical": f"{Fore.RED}[!!!]{Style.RESET_ALL}"
        }
        print(f"{status_colors.get(status_type, '[*]')} {message}")

    def save_report(self, data, filename=None):
        """Save scan results to a JSON file"""
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"apexstrike_report_{timestamp}.json"
            
        try:
            with open(filename, 'w') as f:
                json.dump(data, f, indent=2)
            self.print_status(f"Reporte guardado en: {Fore.CYAN}{filename}{Style.RESET_ALL}", "success")
            self.print_status(f"Tamaño del reporte: {Fore.CYAN}{len(str(data))} bytes{Style.RESET_ALL}", "info")
        except Exception as e:
            self.print_status(f"Error al guardar el reporte: {str(e)}", "error")

    def start_progress(self, description, total=100):
        """Iniciar barra de progreso"""
        if not self.progress:
            self.progress = ProgressBar(description, total)
            self.progress.start()

    def update_progress(self, current):
        """Actualizar barra de progreso"""
        if self.progress:
            self.progress.update(current)

    def stop_progress(self):
        """Detener barra de progreso"""
        if self.progress:
            self.progress.stop()
            self.progress = None

    def run_port_scan(self, args):
        """Run port scanning module"""
        try:
            self.print_status(f"Iniciando escaneo de puertos en {Fore.CYAN}{args.target}{Style.RESET_ALL}", "info")
            self.print_status(f"Rango de puertos: {Fore.CYAN}{args.port_start}-{args.port_end}{Style.RESET_ALL}", "info")
            self.print_status(f"Threads: {Fore.CYAN}{args.threads}{Style.RESET_ALL}", "info")
            
            total_ports = args.port_end - args.port_start + 1
            self.start_progress("Escaneando puertos", total_ports)
            
            scanner = PortScanner(args.target)
            ports = scanner.run_scan(
                start_port=args.port_start,
                end_port=args.port_end,
                threads=args.threads,
                progress_callback=self.update_progress
            )
            
            self.stop_progress()
            
            if ports:
                self.print_status(f"Escaneo completado - {Fore.CYAN}{len(ports)} puertos encontrados{Style.RESET_ALL}", "success")
                
                # Mostrar resultados detallados
                print(f"\n{Fore.CYAN}Puertos abiertos encontrados:{Style.RESET_ALL}")
                for port, service in ports.items():
                    print(f"{Fore.GREEN}[+] Puerto {port}: {Fore.CYAN}{service}{Style.RESET_ALL}")
                
                if args.output:
                    self.save_report({'port_scan': ports}, args.output)
            else:
                self.print_status("No se encontraron puertos abiertos", "warning")
                
        except Exception as e:
            self.stop_progress()
            raise e

    def run_web_scan(self, args):
        """Run web vulnerability scanning module"""
        try:
            mode_str = "API" if args.mode == "api" else "Web"
            self.print_status(f"Iniciando escaneo {mode_str} en {Fore.CYAN}{args.target}{Style.RESET_ALL}", "info")
            if args.deep:
                self.print_status("Modo de escaneo profundo activado", "warning")
            
            scanner = WebScanner(args.target)
            
            if args.mode == "api":
                self.start_progress("Analizando endpoints API", 100)
                vulns, endpoints = scanner.scan_api(progress_callback=self.update_progress)
                self.stop_progress()
                
                if endpoints:
                    print(f"\n{Fore.CYAN}Endpoints API encontrados:{Style.RESET_ALL}")
                    for endpoint in endpoints:
                        method = endpoint.get('method', 'GET')
                        path = endpoint.get('path', '')
                        status = endpoint.get('status', '')
                        color = Fore.GREEN if status.startswith('2') else Fore.YELLOW
                        print(f"{color}[{method}] {path} - Status: {status}{Style.RESET_ALL}")
            else:
                self.start_progress("Escaneando vulnerabilidades web", 100)
                vulns, endpoints = scanner.scan_web(deep=args.deep, progress_callback=self.update_progress)
                self.stop_progress()
                
                if vulns:
                    print(f"\n{Fore.CYAN}Vulnerabilidades encontradas:{Style.RESET_ALL}")
                    for vuln in vulns:
                        severity = vuln.get('severity', 'UNKNOWN')
                        color = {
                            'HIGH': Fore.RED,
                            'MEDIUM': Fore.YELLOW,
                            'LOW': Fore.GREEN
                        }.get(severity.upper(), Fore.WHITE)
                        
                        print(f"\n{color}[{severity}] {vuln.get('type', 'Unknown')}{Style.RESET_ALL}")
                        print(f"  URL: {Fore.CYAN}{vuln.get('url', 'N/A')}{Style.RESET_ALL}")
                        print(f"  Descripción: {vuln.get('description', 'N/A')}")
                        if 'payload' in vuln:
                            print(f"  Payload: {Fore.YELLOW}{vuln['payload']}{Style.RESET_ALL}")
            
            report = scanner.generate_report()
            if args.output:
                self.save_report(json.loads(report), args.output)
                
            # Resumen final
            total_vulns = len(vulns) if vulns else 0
            total_endpoints = len(endpoints) if endpoints else 0
            
            print(f"\n{Fore.CYAN}Resumen del escaneo:{Style.RESET_ALL}")
            print(f"- Total de vulnerabilidades: {Fore.RED if total_vulns > 0 else Fore.GREEN}{total_vulns}{Style.RESET_ALL}")
            print(f"- Total de endpoints: {Fore.CYAN}{total_endpoints}{Style.RESET_ALL}")
            
        except Exception as e:
            self.stop_progress()
            raise e

    def run_iot_scan(self, args):
        """Run IoT scanning module"""
        if args.network:
            self.print_status(f"Escaneando red {Fore.CYAN}{args.target}{Style.RESET_ALL} en busca de dispositivos IoT", "info")
        else:
            self.print_status(f"Analizando dispositivo IoT {Fore.CYAN}{args.target}{Style.RESET_ALL}", "info")
        
        scanner = IoTScanner(args.target)
        if args.network:
            scanner.scan_network(args.target)
        else:
            vulns, devices = scanner.scan_iot_device()
            self.print_status(f"Dispositivos encontrados: {Fore.CYAN}{len(devices)}{Style.RESET_ALL}", "info")
            self.print_status(f"Vulnerabilidades encontradas: {Fore.CYAN}{len(vulns)}{Style.RESET_ALL}", "info")
            
        report = scanner.generate_report()
        if args.output:
            self.save_report(report, args.output)
                        color = {

    def run_dos_test(self, args):
        """Run DoS testing module"""
        self.print_status(f"Iniciando prueba DoS ({Fore.CYAN}{args.method}{Style.RESET_ALL}) en {Fore.CYAN}{args.target}{Style.RESET_ALL}", "warning")
        self.print_status(f"Duración: {Fore.CYAN}{args.duration}s{Style.RESET_ALL} - Puerto: {Fore.CYAN}{args.port}{Style.RESET_ALL}", "info")
        self.print_status("⚠️  Esta prueba es solo para fines educativos y sistemas autorizados", "critical")
        
        tester = DoSTester(args.target)
        tester.start_test(
            duration=args.duration,
            port=args.port,
            method=args.method
        )
        
        report = tester.generate_report()
        if args.output:
            self.save_report(report, args.output)
        
        self.print_status("Prueba DoS completada", "success")

    def run_exploit_scan(self, args):
        """Ejecutar análisis de vulnerabilidades y exploits"""
        try:
            self.print_status(f"Iniciando análisis avanzado de {Fore.CYAN}{args.target}{Style.RESET_ALL}", "info")
            
            # Iniciar motor de exploits
            engine = ExploitEngine(args.target)
            
            # Análisis SSL/TLS
            self.start_progress("Analizando configuración SSL/TLS", 100)
            ssl_vulns = engine.analyze_ssl()
            self.stop_progress()
            
            if ssl_vulns:
                print(f"\n{Fore.CYAN}Vulnerabilidades SSL/TLS:{Style.RESET_ALL}")
                for vuln in ssl_vulns:
                    print(f"{Fore.RED}[!] {vuln.description}{Style.RESET_ALL}")
                    if vuln.mitigation:
                        print(f"{Fore.GREEN}[+] Mitigación: {vuln.mitigation}{Style.RESET_ALL}")
            
            # Análisis de Headers
            self.start_progress("Analizando headers de seguridad", 100)
            header_vulns = engine.analyze_headers(f"https://{args.target}")
            self.stop_progress()
            
            if header_vulns:
                print(f"\n{Fore.CYAN}Headers de seguridad faltantes:{Style.RESET_ALL}")
                for vuln in header_vulns:
                    print(f"{Fore.YELLOW}[!] {vuln.description}{Style.RESET_ALL}")
                    if vuln.mitigation:
                        print(f"{Fore.GREEN}[+] Mitigación: {vuln.mitigation}{Style.RESET_ALL}")
            
            # Pruebas de inyección
            if not args.no_dos:
                self.start_progress("Realizando pruebas de inyección", 100)
                params = {'id': '1', 'q': 'test', 'search': 'test'}
                sqli_vulns = engine.test_sqli(f"https://{args.target}", params)
                xss_vulns = engine.test_xss(f"https://{args.target}", params)
                self.stop_progress()
                
                if sqli_vulns or xss_vulns:
                    print(f"\n{Fore.CYAN}Vulnerabilidades de inyección:{Style.RESET_ALL}")
                    for vuln in sqli_vulns + xss_vulns:
                        print(f"\n{Fore.RED}[!] {vuln.type}: {vuln.description}{Style.RESET_ALL}")
                        print(f"   Prueba: {Fore.YELLOW}{vuln.proof}{Style.RESET_ALL}")
                        if vuln.mitigation:
                            print(f"   Mitigación: {Fore.GREEN}{vuln.mitigation}{Style.RESET_ALL}")
            
            # Análisis de API
            self.start_progress("Analizando endpoints de API", 100)
            api_vulns = engine.check_api_vulnerabilities(f"https://{args.target}")
            self.stop_progress()
            
            if api_vulns:
                print(f"\n{Fore.CYAN}Vulnerabilidades en API:{Style.RESET_ALL}")
                for vuln in api_vulns:
                    print(f"\n{Fore.RED}[!] {vuln.type}{Style.RESET_ALL}")
                    print(f"   Descripción: {vuln.description}")
                    if vuln.proof:
                        print(f"   Prueba: {Fore.YELLOW}{vuln.proof}{Style.RESET_ALL}")
                    if vuln.mitigation:
                        print(f"   Mitigación: {Fore.GREEN}{vuln.mitigation}{Style.RESET_ALL}")
            
            # Generar reporte
            if args.output:
                report = engine.generate_report()
                self.save_report(report, args.output)
                
            # Mostrar resumen
            all_vulns = ssl_vulns + header_vulns + sqli_vulns + xss_vulns + api_vulns
            severity_count = {
                'CRITICAL': len([v for v in all_vulns if v.severity == 'CRITICAL']),
                'HIGH': len([v for v in all_vulns if v.severity == 'HIGH']),
                'MEDIUM': len([v for v in all_vulns if v.severity == 'MEDIUM']),
                'LOW': len([v for v in all_vulns if v.severity == 'LOW'])
            }
            
            print(f"\n{Fore.CYAN}Resumen de vulnerabilidades:{Style.RESET_ALL}")
            print(f"{Fore.RED}[!] Críticas: {severity_count['CRITICAL']}{Style.RESET_ALL}")
            print(f"{Fore.RED}[!] Altas: {severity_count['HIGH']}{Style.RESET_ALL}")
            print(f"{Fore.YELLOW}[!] Medias: {severity_count['MEDIUM']}{Style.RESET_ALL}")
            print(f"{Fore.GREEN}[+] Bajas: {severity_count['LOW']}{Style.RESET_ALL}")
            
        except Exception as e:
            self.stop_progress()
            raise e

def check_platform():
    """Verificar y configurar el entorno según la plataforma"""
    if sys.platform.startswith('win'):
        # Configuración para Windows
        os.system('color')  # Habilitar colores en Windows
        return "Windows"
    elif sys.platform.startswith('linux'):
        return "Linux"
    elif sys.platform.startswith('darwin'):
        return "MacOS"
    return "Unknown"

def check_privileges():
    """Verificar privilegios de administrador/root"""
    try:
        if sys.platform.startswith('win'):
            import ctypes
            return ctypes.windll.shell32.IsUserAnAdmin() != 0
        else:
            return os.geteuid() == 0
    except:
        return False

def show_quick_help():
    """Mostrar ayuda rápida con ejemplos comunes"""
    print(f"\n{Fore.CYAN}Ejemplos de uso rápido:{Style.RESET_ALL}")
    print(f"{Fore.YELLOW}1. Escaneo rápido de puertos:{Style.RESET_ALL}")
    print("   ./apexstrike.py -t ejemplo.com portscan")
    print(f"\n{Fore.YELLOW}2. Análisis web completo:{Style.RESET_ALL}")
    print("   ./apexstrike.py -t http://ejemplo.com webscan --deep")
    print(f"\n{Fore.YELLOW}3. Búsqueda de dispositivos IoT:{Style.RESET_ALL}")
    print("   ./apexstrike.py -t 192.168.1.0/24 iotscan --network")
    print(f"\n{Fore.YELLOW}4. Análisis avanzado de vulnerabilidades:{Style.RESET_ALL}")
    print("   ./apexstrike.py -t ejemplo.com exploit --deep")
    print(f"\n{Fore.YELLOW}5. Guardar resultados en archivo:{Style.RESET_ALL}")
    print("   ./apexstrike.py -t ejemplo.com exploit -o reporte.json")
    
    print(f"\n{Fore.CYAN}Módulos disponibles:{Style.RESET_ALL}")
    print(f"{Fore.GREEN}portscan{Style.RESET_ALL} - Escaneo de puertos y servicios")
    print(f"{Fore.GREEN}webscan{Style.RESET_ALL}  - Análisis de vulnerabilidades web")
    print(f"{Fore.GREEN}iotscan{Style.RESET_ALL}  - Detección y análisis de dispositivos IoT")
    print(f"{Fore.GREEN}exploit{Style.RESET_ALL}  - Análisis avanzado de vulnerabilidades")
    print(f"{Fore.GREEN}dos{Style.RESET_ALL}      - Pruebas de estrés (solo educativo)")

def main():
    try:
        # Verificar y configurar plataforma
        platform = check_platform()
        is_admin = check_privileges()
        
        tool = ApexStrike()
        tool.print_banner()
        
        # Mostrar información del sistema
        tool.print_status(f"Sistema Operativo: {Fore.CYAN}{platform}{Style.RESET_ALL}", "info")
        if not is_admin:
            tool.print_status("⚠️  Se recomienda ejecutar con privilegios de administrador para todas las funciones", "warning")
        
        # Configurar el parser con descripción detallada
        parser = argparse.ArgumentParser(
            description=f"{Fore.CYAN}ApexStrike - Framework Avanzado de Pruebas de Seguridad{Style.RESET_ALL}",
            formatter_class=argparse.RawDescriptionHelpFormatter,
            epilog=f"{Fore.YELLOW}Para más información y ejemplos, use el argumento --help-extra{Style.RESET_ALL}"
        )
        
        # Argumentos principales
        parser.add_argument("-t", "--target", 
                          help="Objetivo: IP, dominio o rango de red (ej: ejemplo.com, 192.168.1.0/24)")
        parser.add_argument("-o", "--output", 
                          help="Archivo de salida (default: apexstrike_report_<timestamp>.json)")
        parser.add_argument("-q", "--quiet", 
                          action="store_true", 
                          help="Modo silencioso - solo muestra resultados importantes")
        parser.add_argument("--help-extra", 
                          action="store_true", 
                          help="Mostrar ejemplos y ayuda adicional")
        
        # Subcomandos
        subparsers = parser.add_subparsers(dest="command", 
                                          help="Módulo a ejecutar")
    
        # Configuración de módulos
        port_parser = subparsers.add_parser("portscan", 
                                          help="Escaneo avanzado de puertos",
                                          description="Realiza un escaneo detallado de puertos con detección de servicios")
        port_parser.add_argument("--port-start", type=int, default=1, 
                               help="Puerto inicial (default: 1)")
        port_parser.add_argument("--port-end", type=int, default=1000, 
                               help="Puerto final (default: 1000)")
        port_parser.add_argument("--threads", type=int, default=100, 
                               help="Hilos de escaneo (default: 100)")
        port_parser.add_argument("--timeout", type=float, default=1.0, 
                               help="Timeout por conexión en segundos (default: 1.0)")
        port_parser.add_argument("--top-ports", action="store_true", 
                               help="Escanear solo puertos más comunes")

        web_parser = subparsers.add_parser("webscan", 
                                         help="Análisis de vulnerabilidades web",
                                         description="Realiza un análisis completo de seguridad web")
        web_parser.add_argument("--mode", choices=["web", "api"], default="web",
                              help="Modo de escaneo: web o api (default: web)")
        web_parser.add_argument("--deep", action="store_true",
                              help="Realizar escaneo profundo")
        web_parser.add_argument("--no-dos", action="store_true",
                              help="Excluir pruebas que puedan afectar el servicio")

        iot_parser = subparsers.add_parser("iotscan", 
                                         help="Análisis de dispositivos IoT",
                                         description="Detecta y analiza dispositivos IoT en la red")
        iot_parser.add_argument("--network", action="store_true",
                              help="Escanear toda la red en busca de dispositivos")
        iot_parser.add_argument("--protocol", 
                              choices=["all", "mqtt", "coap", "telnet"],
                              default="all", 
                              help="Protocolo específico a probar")
        iot_parser.add_argument("--discovery", action="store_true",
                              help="Solo modo descubrimiento, sin pruebas invasivas")

        dos_parser = subparsers.add_parser("dos", 
                                        help="Pruebas de estrés (solo educativo)",
                                        description="Realiza pruebas de estrés controladas")
        dos_parser.add_argument("--duration", type=int, default=10,
                              help="Duración en segundos (default: 10)")
        dos_parser.add_argument("--port", type=int, default=80,
                              help="Puerto objetivo (default: 80)")
        dos_parser.add_argument("--method",
                              choices=["syn", "udp", "http", "slowloris"],
                              default="syn", 
                              help="Método de prueba (default: syn)")
    
    args = parser.parse_args()
    
    # Mostrar ayuda extendida si se solicita
    if args.help_extra:
        show_quick_help()
        return

    # Verificar argumentos requeridos
    if not args.target and not args.help_extra:
        tool.print_status("Se requiere especificar un objetivo con -t/--target", "error")
        parser.print_help()
        return

    if not args.command:
        tool.print_status("Seleccione un módulo a ejecutar (portscan, webscan, iotscan, dos)", "error")
        parser.print_help()
        return

    try:
        # Verificar conexión a internet
        try:
            import socket
            socket.create_connection(("8.8.8.8", 53), timeout=3)
            tool.print_status("Conexión a Internet: Disponible", "success")
        except OSError:
            tool.print_status("Advertencia: No se detectó conexión a Internet", "warning")

        # Mostrar resumen de la operación
        tool.print_status(f"\n{Fore.CYAN}Resumen de la operación:{Style.RESET_ALL}", "info")
        tool.print_status(f"Objetivo: {Fore.CYAN}{args.target}{Style.RESET_ALL}", "info")
        tool.print_status(f"Módulo: {Fore.CYAN}{args.command}{Style.RESET_ALL}", "info")
        if args.output:
            tool.print_status(f"Archivo de salida: {Fore.CYAN}{args.output}{Style.RESET_ALL}", "info")
        
        # Solicitar confirmación para pruebas DoS
        if args.command == "dos":
            if not is_admin:
                tool.print_status("Se requieren privilegios de administrador para pruebas DoS", "error")
                return
            tool.print_status("\n⚠️  ADVERTENCIA: Las pruebas DoS pueden afectar los servicios", "critical")
            response = input(f"{Fore.YELLOW}¿Está seguro de continuar? (s/N): {Style.RESET_ALL}").lower()
            if response != 's':
                tool.print_status("Operación cancelada por el usuario", "warning")
                return

        # Ejecutar el comando seleccionado
        tool.print_status("\nIniciando operación...", "info")
        
        if args.command == "portscan":
            tool.run_port_scan(args)
        elif args.command == "webscan":
            tool.run_web_scan(args)
        elif args.command == "iotscan":
            tool.run_iot_scan(args)
        elif args.command == "dos":
            tool.run_dos_test(args)
        elif args.command == "exploit":
            tool.run_exploit_scan(args)
        else:
            tool.print_status("Comando no reconocido", "error")
            parser.print_help()
            return

        tool.print_status("\nOperación completada exitosamente", "success")
            
    except KeyboardInterrupt:
        tool.print_status("\nOperación interrumpida por el usuario", "warning")
        sys.exit(0)
    except Exception as e:
        tool.print_status(f"\nError: {str(e)}", "error")
        if not args.quiet:
            import traceback
            tool.print_status("Detalles del error:", "error")
            traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()
